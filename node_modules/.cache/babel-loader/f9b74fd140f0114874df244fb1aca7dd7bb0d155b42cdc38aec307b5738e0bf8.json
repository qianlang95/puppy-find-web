{"ast":null,"code":"var _jsxFileName = \"/Users/silvaliao/Desktop/puppy-find-web/src/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // Initialize authUser from localStorage if it's there\n  const [authUser, setAuthUser] = useState(() => {\n    const savedUserData = localStorage.getItem('authUserData');\n    return savedUserData ? JSON.parse(savedUserData) : {\n      user: null,\n      role: null,\n      userID: null\n    };\n  });\n\n  // Effect to run once on component mount\n  useEffect(() => {\n    // Check for authUserData in localStorage when app loads\n    const savedUserData = localStorage.getItem('authUserData');\n    if (savedUserData) {\n      setAuthUser(JSON.parse(savedUserData));\n    }\n  }, []);\n  const login = userData => {\n    // Assuming userData contains { user, role, userID }\n    setAuthUser(userData);\n\n    // Store userData in localStorage for persistence\n    localStorage.setItem('authUserData', JSON.stringify(userData));\n  };\n  const logout = () => {\n    // Clear authUser state\n    setAuthUser({\n      user: null,\n      role: null,\n      userID: null\n    });\n\n    // Remove userData from localStorage\n    localStorage.removeItem('authUserData');\n  };\n\n  // The value provided by the context includes the authUser state,\n  // the login function, and the logout function\n  const contextValue = {\n    authUser,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"GrieRqVUvrQsLfjW15rUQcKr+/c=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","authUser","setAuthUser","savedUserData","localStorage","getItem","JSON","parse","user","role","userID","login","userData","setItem","stringify","logout","removeItem","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/silvaliao/Desktop/puppy-find-web/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  // Initialize authUser from localStorage if it's there\n  const [authUser, setAuthUser] = useState(() => {\n    const savedUserData = localStorage.getItem('authUserData');\n    return savedUserData ? JSON.parse(savedUserData) : { user: null, role: null, userID: null };\n  });\n\n  // Effect to run once on component mount\n  useEffect(() => {\n    // Check for authUserData in localStorage when app loads\n    const savedUserData = localStorage.getItem('authUserData');\n    if (savedUserData) {\n      setAuthUser(JSON.parse(savedUserData));\n    }\n  }, []);\n\n  const login = (userData) => {\n    // Assuming userData contains { user, role, userID }\n    setAuthUser(userData);\n\n    // Store userData in localStorage for persistence\n    localStorage.setItem('authUserData', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    // Clear authUser state\n    setAuthUser({ user: null, role: null, userID: null });\n\n    // Remove userData from localStorage\n    localStorage.removeItem('authUserData');\n  };\n\n  // The value provided by the context includes the authUser state,\n  // the login function, and the logout function\n  const contextValue = {\n    authUser,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,MAAM;IAC7C,MAAMY,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC1D,OAAOF,aAAa,GAAGG,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,GAAG;MAAEK,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC;EAC7F,CAAC,CAAC;;EAEF;EACAlB,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC1D,IAAIF,aAAa,EAAE;MACjBD,WAAW,CAACI,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAIC,QAAQ,IAAK;IAC1B;IACAV,WAAW,CAACU,QAAQ,CAAC;;IAErB;IACAR,YAAY,CAACS,OAAO,CAAC,cAAc,EAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC;EAChE,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAb,WAAW,CAAC;MAAEM,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAC;;IAErD;IACAN,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;EACzC,CAAC;;EAED;EACA;EACA,MAAMC,YAAY,GAAG;IACnBhB,QAAQ;IACRU,KAAK;IACLI;EACF,CAAC;EAED,oBACErB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAlB,QAAA,EACvCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CA7CWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}